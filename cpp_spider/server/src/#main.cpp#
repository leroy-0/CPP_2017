B#include <cstdlib>
#include <iostream>
#include <thread>
#include <boost/filesystem.hpp>
#include <boost/asio.hpp>
#include "AServer.hpp"
#include "Communication.hpp"

using boost::asio::ip::tcp;

const int max_length = 1024;

void session(tcp::socket sock)
{
    try
    {
        for (;;)
        {
            char data[max_length];

            boost::system::error_code error;
            size_t length = sock.read_some(boost::asio::buffer(data), error);
            if (error == boost::asio::error::eof)
                break; // Connection closed cleanly by peer.
            else if (error)
                throw boost::system::system_error(error); // Some other error.

            boost::asio::write(sock, boost::asio::buffer(data, length));
        }
    }
    catch (std::exception& e)
    {
        std::cerr << "Exception in thread: " << e.what() << "\n";
    }
}

void server(boost::asio::io_service& io_service, unsigned short port)
{
    tcp::acceptor a(io_service, tcp::endpoint(tcp::v4(), port));
    for (;;)
    {
        tcp::socket sock(io_service);
        a.accept(sock);
        std::thread(session, std::move(sock)).detach();
    }
}

void checkLogDir()
{
    const char* path = std::string(LOG_DIR).c_str();
    boost::filesystem::path dir(path);
    try {
        boost::filesystem::create_directory(dir);
    } catch (const std::exception&) { }
}

int main(int argc, char* argv[])
{

    try
    {
        if (argc != 2)
        {
            std::cerr << "Usage: blocking_tcp_echo_server <port>\n";
            return 1;
        }
        boost::asio::io_service io_service;
        checkLogDir();
        spider::AServer serv(io_service, std::atoi(argv[1]));
        serv.run();
    }
    catch (std::exception& e)
    {
        std::cerr << "Exception: " << e.what() << "\n";
    }

    return 0;
}
